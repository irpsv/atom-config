# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson
'.text.html.php':
	'its':
		'prefix': 'its'
		'body': "'${1:key}' => '${2:value}',$3"

	'itc':
		'prefix': 'itc'
		'body': "'$1' => \$$1,$2"

	'thisv':
		'prefix': 'thisv'
		'body': "\$this->$1 = \$$1;"

	'isn':
		'prefix': 'isn'
		'body': 'is_null($1)$2'

	'yii action':
		'prefix': 'yia'
		'body': """
		public function action$1($2)
		{
			$3
		}
		"""

	'yii render':
	  'prefix': 'yiren'
	  'body': """
	  return $this->render$1('${2:index}', [
	  	$3
	  ]);
	  """

	'yii behaviors access control':
		'prefix': 'yibac'
		'body': """
		public function behaviors()
		{
		    return [
		        [
		            "class" => AccessControl::className(),
					"only" => ['index'],
		            "rules" => [
		                [
		                    "roles" => ["@"],
		                    "allow" => true,
		                ]
		            ],
		        ]
		    ];
		}
		"""

	'yii app':
		'prefix': 'yiap'
		'body': '\\\\Yii::$app->'
